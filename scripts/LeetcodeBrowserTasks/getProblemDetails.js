async function getProblemDetails(titleSlug) {  const BASE_URL = "https://leetcode.com/graphql/";  console.info("Fetching problem details...");  const query = queryGenerator(titleSlug);  try {  const response = await fetch(BASE_URL, {method: "POST",headers: { "Content-Type": "application/json",},body: JSON.stringify({ query }),});  if (!response.ok) {console.error("Failed to retrieve page");throw new Error("Failed to retrieve question details");}const data = await response.json();  if (!data || !data.data || !data.data.question) {console.error("Invalid URL");throw new Error("Invalid URL");}  console.info("Data fetched successfully");const problem = data.data.question;  return {questionId: problem.questionId,questionFrontendId: problem.questionFrontendId,questionTitle: problem.title,question: problem.content,link: `https://leetcode.com/problems/${problem.titleSlug}`,difficulty: problem.difficulty,topicTags: problem.topicTags,titleSlug: problem.titleSlug,};  } catch (error) {  console.error(error.message);throw new Error(error.message);  }}function queryGenerator(titleSlug) {titleSlug = titleSlug.replace(/ /g, "-").replace(/\//g, ""); const query = `  query { question(titleSlug: "${titleSlug}") { questionId questionFrontendId title titleSlug content difficulty topicTags { name slug translatedName } }  }`; console.info("Query generated");return query;}